local lsp = require("lsp-zero")

lsp.preset("recommended")

lsp.ensure_installed({
    "lua_ls",
    "clojure_lsp",
    "tailwindcss",
    "tsserver",
    "eslint",
    "gopls",
    "volar",
})

-- Fix Undefined global 'vim'
lsp.nvim_workspace()


local cmp = require('cmp')
local cmp_action = require('lsp-zero').cmp_action()

require('luasnip.loaders.from_vscode').lazy_load()
cmp.setup({
    sources = {
        { name = 'nvim_lsp' },
        { name = 'luasnip' },
    },
    mapping = {
        ['<C-f>'] = cmp_action.luasnip_jump_forward(),
        ['<C-b>'] = cmp_action.luasnip_jump_backward(),
    },
    automatic_installation = true
})
local cmp_select = { behavior = cmp.SelectBehavior.Select }
local cmp_mappings = lsp.defaults.cmp_mappings({
    ['<C-p>'] = cmp.mapping.select_prev_item(cmp_select),
    ['<C-n>'] = cmp.mapping.select_next_item(cmp_select),
    ['<C-y>'] = cmp.mapping.confirm({ select = true }),
    ["<C-Space>"] = cmp.mapping.complete(),
})

cmp_mappings['<Tab>'] = nil
cmp_mappings['<S-Tab>'] = nil

lsp.setup_nvim_cmp({
    mapping = cmp_mappings
})

lsp.set_preferences({
    suggest_lsp_servers = false,
    sign_icons = {
        error = 'E',
        warn = 'W',
        hint = 'H',
        info = 'I'
    }
})

lsp.on_attach(function(client, bufnr)
    local opts = { buffer = bufnr, remap = false }

    vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts)
    vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)
    vim.keymap.set("n", "<leader>vws", function() vim.lsp.buf.workspace_symbol() end, opts)
    vim.keymap.set("n", "<leader>vd", function() vim.diagnostic.open_float() end, opts)
    vim.keymap.set("n", "[d", function() vim.diagnostic.goto_next() end, opts)
    vim.keymap.set("n", "]d", function() vim.diagnostic.goto_prev() end, opts)
    vim.keymap.set("n", "<leader>vca", function() vim.lsp.buf.code_action() end, opts)
    vim.keymap.set("n", "<leader>vrr", function() vim.lsp.buf.references() end, opts)
    vim.keymap.set("n", "<leader>vrn", function() vim.lsp.buf.rename() end, opts)
    vim.keymap.set("i", "<C-h>", function() vim.lsp.buf.signature_help() end, opts)
end)

lsp.setup()
vim.diagnostic.config({
    virtual_text = true
})

--- LSP CONFIG
local nvim_lsp = require "lspconfig"

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true

local on_attach = function(_, bufnr)
    vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")
end

nvim_lsp.tsserver.setup {
    on_attach = on_attach,
    capabilities = capabilities,
    init_options = { usePlaceholders = true }
}

nvim_lsp.diagnosticls.setup {
    filetypes = { "vue", "javascript", "javascriptreact", "typescript", "typescriptreact", "css" },
    init_options = {
        filetypes = {
            javascript = "eslint",
            typescript = "eslint",
            javascriptreact = "eslint",
            typescriptreact = "eslint"
        },
        linters = {
            eslint = {
                sourceName = "eslint",
                command = "./node_modules/.bin/eslint",
                rootPatterns = {
                    ".eslitrc.js",
                    "package.json"
                },
                debounce = 100,
                args = {
                    "--cache",
                    "--stdin",
                    "--stdin-filename",
                    "%filepath",
                    "--format",
                    "json"
                },
                parseJson = {
                    errorsRoot = "[0].messages",
                    line = "line",
                    column = "column",
                    endLine = "endLine",
                    endColumn = "endColumn",
                    message = "${message} [${ruleId}]",
                    security = "severity"
                },
                securities = {
                    [2] = "error",
                    [1] = "warning"
                }
            }
        }
    }
}

require("formatter").setup(
    {
        logging = true,
        filetype = {
            typescriptreact = {
                -- prettier
                function()
                    return {
                        exe = "prettier",
                        args = { "--stdin-filepath", vim.api.nvim_buf_get_name(0) },
                        stdin = true
                    }
                end
            },
            typescript = {
                -- prettier
                function()
                    return {
                        exe = "prettier",
                        args = { "--stdin-filepath", vim.api.nvim_buf_get_name(0) },
                        stdin = true
                    }
                end
                -- linter
                -- function()
                --   return {
                --     exe = "eslint",
                --     args = {
                --       "--stdin-filename",
                --       vim.api.nvim_buf_get_name(0),
                --       "--fix",
                --       "--cache"
                --     },
                --     stdin = false
                --   }
                -- end
            },
            javascript = {
                -- prettier
                function()
                    return {
                        exe = "prettier",
                        args = { "--stdin-filepath", vim.api.nvim_buf_get_name(0) },
                        stdin = true
                    }
                end
            },

            vue = {
                -- prettier
                function()
                    return {
                        exe = "prettier",
                        args = { "--stdin-filepath", vim.api.nvim_buf_get_name(0) },
                        stdin = true
                    }
                end
            },

            javascriptreact = {
                -- prettier
                function()
                    return {
                        exe = "prettier",
                        args = { "--stdin-filepath", vim.api.nvim_buf_get_name(0) },
                        stdin = true
                    }
                end
            },
            json = {
                -- prettier
                function()
                    return {
                        exe = "prettier",
                        args = { "--stdin-filepath", vim.api.nvim_buf_get_name(0) },
                        stdin = true
                    }
                end
            },
            lua = {
                -- luafmt
                function()
                    return {
                        exe = "luafmt",
                        args = { "--indent-count", 2, "--stdin" },
                        stdin = true
                    }
                end
            }
        }
    }
)

--Set completeopt to have a better completion experience
vim.o.completeopt = "menu,menuone,noselect"

require("compe").setup(
    {
        enabled = true,
        autocomplete = true,
        debug = false,
        min_length = 1,
        preselect = "enable",
        throttle_time = 80,
        source_timeout = 200,
        incomplete_delay = 400,
        allow_prefix_unmatch = false,
        source = {
            path = true,
            buffer = true,
            calc = true,
            ultisnips = true,
            vsnip = false,
            nvim_lsp = true,
            nvim_lua = true,
            spell = true,
            tags = true
        }
    }
)
